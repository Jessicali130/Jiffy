{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08d8d522-8a3f-4a8a-8c72-dc23a710477d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The purpose of this project is to increase ecommerce sales of Jiffy.com, a blank apparel company. We will use the RFM model (recency, frequency, and monetary data) to unlock personalized marketing, and maximize cohort analysis to increase retention."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "cf1c661b-035f-4431-8eb9-0353ec8272c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing libararies\n",
    "from datetime import datetime\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "0d4d6678-e14c-44e9-9867-fe6324c7bc0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>order_timestamp</th>\n",
       "      <th>discount</th>\n",
       "      <th>ship_state</th>\n",
       "      <th>shipping_revenue</th>\n",
       "      <th>shipping_cost</th>\n",
       "      <th>returned</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38831</td>\n",
       "      <td>a6730d49e0989b2cc0158c6182fafb93</td>\n",
       "      <td>2015-11-30 05:03:15.159</td>\n",
       "      <td>0.0</td>\n",
       "      <td>FL</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.8</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45499</td>\n",
       "      <td>ae2e8c1fa5326e1f793d4c02f720156c</td>\n",
       "      <td>2015-11-30 19:52:10.830</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TN</td>\n",
       "      <td>5.95</td>\n",
       "      <td>6.8</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>69415</td>\n",
       "      <td>ba200839cd304b8342f8c5d0eb4d7c75</td>\n",
       "      <td>2015-12-02 22:54:40.380</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.8</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id                      customer_uid          order_timestamp  \\\n",
       "0     38831  a6730d49e0989b2cc0158c6182fafb93  2015-11-30 05:03:15.159   \n",
       "1     45499  ae2e8c1fa5326e1f793d4c02f720156c  2015-11-30 19:52:10.830   \n",
       "2     69415  ba200839cd304b8342f8c5d0eb4d7c75  2015-12-02 22:54:40.380   \n",
       "\n",
       "   discount ship_state  shipping_revenue  shipping_cost  returned  \n",
       "0       0.0         FL              0.00            6.8     False  \n",
       "1       0.0         TN              5.95            6.8      True  \n",
       "2       0.0         TN              0.00            6.8     False  "
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read orders file\n",
    "orders=pd.read_csv('/Users/weiyuli/Desktop/data/orders.csv')\n",
    "orders.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "5dfd964e-a60f-4108-a3a2-67eee275e43a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>line_item_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>supplier_cost</th>\n",
       "      <th>product_category</th>\n",
       "      <th>color</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1073625002</td>\n",
       "      <td>31323782</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8055020046</td>\n",
       "      <td>22921936</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5008546658</td>\n",
       "      <td>4435273</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   line_item_id  order_id  quantity  selling_price  supplier_cost  \\\n",
       "0    1073625002  31323782         1           9.25           4.37   \n",
       "1    8055020046  22921936         1           9.25           4.37   \n",
       "2    5008546658   4435273         1           9.25           4.37   \n",
       "\n",
       "  product_category  color size  \n",
       "0            OTHER  BLACK  2XL  \n",
       "1            OTHER  BLACK  2XL  \n",
       "2            OTHER  BLACK  2XL  "
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read line items file\n",
    "items=pd.read_csv('/Users/weiyuli/Desktop/data/line_items.csv')\n",
    "items.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "8daae5f7-0be0-40dd-8230-6250e84ce6cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>line_item_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>supplier_cost</th>\n",
       "      <th>product_category</th>\n",
       "      <th>color</th>\n",
       "      <th>size</th>\n",
       "      <th>revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1073625002</td>\n",
       "      <td>31323782</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8055020046</td>\n",
       "      <td>22921936</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5008546658</td>\n",
       "      <td>4435273</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   line_item_id  order_id  quantity  selling_price  supplier_cost  \\\n",
       "0    1073625002  31323782         1           9.25           4.37   \n",
       "1    8055020046  22921936         1           9.25           4.37   \n",
       "2    5008546658   4435273         1           9.25           4.37   \n",
       "\n",
       "  product_category  color size  revenue  \n",
       "0            OTHER  BLACK  2XL     9.25  \n",
       "1            OTHER  BLACK  2XL     9.25  \n",
       "2            OTHER  BLACK  2XL     9.25  "
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add new renenue column to items table\n",
    "items['revenue']=items['selling_price']*items['quantity']\n",
    "items.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "d0a70b6f-a927-414c-b7be-01de3337ef64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>order_timestamp</th>\n",
       "      <th>discount</th>\n",
       "      <th>ship_state</th>\n",
       "      <th>shipping_revenue</th>\n",
       "      <th>shipping_cost</th>\n",
       "      <th>returned</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38831</td>\n",
       "      <td>a6730d49e0989b2cc0158c6182fafb93</td>\n",
       "      <td>2015-11-30 05:03:15.159</td>\n",
       "      <td>0.0</td>\n",
       "      <td>FL</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.8</td>\n",
       "      <td>False</td>\n",
       "      <td>2015-11-30 05:03:15.159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45499</td>\n",
       "      <td>ae2e8c1fa5326e1f793d4c02f720156c</td>\n",
       "      <td>2015-11-30 19:52:10.830</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TN</td>\n",
       "      <td>5.95</td>\n",
       "      <td>6.8</td>\n",
       "      <td>True</td>\n",
       "      <td>2015-11-30 19:52:10.830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>69415</td>\n",
       "      <td>ba200839cd304b8342f8c5d0eb4d7c75</td>\n",
       "      <td>2015-12-02 22:54:40.380</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.8</td>\n",
       "      <td>False</td>\n",
       "      <td>2015-12-02 22:54:40.380</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id                      customer_uid          order_timestamp  \\\n",
       "0     38831  a6730d49e0989b2cc0158c6182fafb93  2015-11-30 05:03:15.159   \n",
       "1     45499  ae2e8c1fa5326e1f793d4c02f720156c  2015-11-30 19:52:10.830   \n",
       "2     69415  ba200839cd304b8342f8c5d0eb4d7c75  2015-12-02 22:54:40.380   \n",
       "\n",
       "   discount ship_state  shipping_revenue  shipping_cost  returned  \\\n",
       "0       0.0         FL              0.00            6.8     False   \n",
       "1       0.0         TN              5.95            6.8      True   \n",
       "2       0.0         TN              0.00            6.8     False   \n",
       "\n",
       "                     date  \n",
       "0 2015-11-30 05:03:15.159  \n",
       "1 2015-11-30 19:52:10.830  \n",
       "2 2015-12-02 22:54:40.380  "
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create date column based on order_timestamp\n",
    "orders['date'] = pd.to_datetime(orders['order_timestamp'])\n",
    "orders.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "192072de-0067-47d2-8798-88fd390b0267",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>line_item_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>supplier_cost</th>\n",
       "      <th>product_category</th>\n",
       "      <th>color</th>\n",
       "      <th>size</th>\n",
       "      <th>revenue</th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>order_timestamp</th>\n",
       "      <th>discount</th>\n",
       "      <th>ship_state</th>\n",
       "      <th>shipping_revenue</th>\n",
       "      <th>shipping_cost</th>\n",
       "      <th>returned</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1073625002</td>\n",
       "      <td>31323782</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "      <td>2674197df180fdb59dfdaa65757e1f4c</td>\n",
       "      <td>2020-05-22 20:00:58.985</td>\n",
       "      <td>0.075</td>\n",
       "      <td>MI</td>\n",
       "      <td>9.95</td>\n",
       "      <td>8.52</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-05-22 20:00:58.985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8055020046</td>\n",
       "      <td>22921936</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "      <td>1bcd890fd3b1c598cfd6ea4b3e3b34f1</td>\n",
       "      <td>2019-10-10 18:22:52.295</td>\n",
       "      <td>0.040</td>\n",
       "      <td>PA</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.27</td>\n",
       "      <td>True</td>\n",
       "      <td>2019-10-10 18:22:52.295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5008546658</td>\n",
       "      <td>4435273</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "      <td>3069349651afb03593af7d090535f5dc</td>\n",
       "      <td>2017-05-08 21:42:06.888</td>\n",
       "      <td>0.040</td>\n",
       "      <td>AL</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.09</td>\n",
       "      <td>False</td>\n",
       "      <td>2017-05-08 21:42:06.888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1013699827</td>\n",
       "      <td>6843815</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "      <td>64f9abc25d599e49cfddeb3de7774ca0</td>\n",
       "      <td>2017-10-23 02:03:00.536</td>\n",
       "      <td>0.000</td>\n",
       "      <td>MI</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.09</td>\n",
       "      <td>False</td>\n",
       "      <td>2017-10-23 02:03:00.536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1022146551</td>\n",
       "      <td>9923010</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>RED</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "      <td>d47a0e4a0c6d4e95ade399421c28b5f6</td>\n",
       "      <td>2018-05-22 22:44:35.824</td>\n",
       "      <td>0.000</td>\n",
       "      <td>LA</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.39</td>\n",
       "      <td>False</td>\n",
       "      <td>2018-05-22 22:44:35.824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5001304676</td>\n",
       "      <td>897011</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>RED</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "      <td>3069349651afb03593af7d090535f5dc</td>\n",
       "      <td>2016-04-04 21:52:30.574</td>\n",
       "      <td>0.000</td>\n",
       "      <td>AL</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.80</td>\n",
       "      <td>False</td>\n",
       "      <td>2016-04-04 21:52:30.574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>5001302446</td>\n",
       "      <td>949897</td>\n",
       "      <td>1</td>\n",
       "      <td>9.25</td>\n",
       "      <td>4.37</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>RED</td>\n",
       "      <td>2XL</td>\n",
       "      <td>9.25</td>\n",
       "      <td>3069349651afb03593af7d090535f5dc</td>\n",
       "      <td>2016-04-04 21:24:08.161</td>\n",
       "      <td>0.125</td>\n",
       "      <td>AL</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>False</td>\n",
       "      <td>2016-04-04 21:24:08.161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5001304677</td>\n",
       "      <td>897011</td>\n",
       "      <td>1</td>\n",
       "      <td>13.50</td>\n",
       "      <td>7.11</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>RED</td>\n",
       "      <td>3XL</td>\n",
       "      <td>13.50</td>\n",
       "      <td>3069349651afb03593af7d090535f5dc</td>\n",
       "      <td>2016-04-04 21:52:30.574</td>\n",
       "      <td>0.000</td>\n",
       "      <td>AL</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.80</td>\n",
       "      <td>False</td>\n",
       "      <td>2016-04-04 21:52:30.574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1002241505</td>\n",
       "      <td>1446247</td>\n",
       "      <td>3</td>\n",
       "      <td>9.31</td>\n",
       "      <td>4.17</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>27.93</td>\n",
       "      <td>466c637ec98030cfc71c8b85f297c476</td>\n",
       "      <td>2016-06-10 13:22:51.571</td>\n",
       "      <td>0.040</td>\n",
       "      <td>IN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.09</td>\n",
       "      <td>False</td>\n",
       "      <td>2016-06-10 13:22:51.571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9001563508</td>\n",
       "      <td>1083237</td>\n",
       "      <td>2</td>\n",
       "      <td>4.82</td>\n",
       "      <td>3.27</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>9.64</td>\n",
       "      <td>4a14eb828138502cfb45574454a8e197</td>\n",
       "      <td>2016-04-24 14:25:39.811</td>\n",
       "      <td>0.000</td>\n",
       "      <td>FL</td>\n",
       "      <td>7.95</td>\n",
       "      <td>6.80</td>\n",
       "      <td>False</td>\n",
       "      <td>2016-04-24 14:25:39.811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>115096974449</td>\n",
       "      <td>77984821</td>\n",
       "      <td>1</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>6.66</td>\n",
       "      <td>d490c06fcfc47b6de801511d046aab4d</td>\n",
       "      <td>2020-11-03 22:26:52.714</td>\n",
       "      <td>0.040</td>\n",
       "      <td>TX</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.25</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-11-03 22:26:52.714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>114085432342</td>\n",
       "      <td>54166854</td>\n",
       "      <td>1</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>6.66</td>\n",
       "      <td>c68011479b0a1228e775b02a5b1b5b50</td>\n",
       "      <td>2020-08-13 04:48:51.994</td>\n",
       "      <td>0.160</td>\n",
       "      <td>AR</td>\n",
       "      <td>0.00</td>\n",
       "      <td>14.77</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-08-13 04:48:51.994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>114087916995</td>\n",
       "      <td>59474047</td>\n",
       "      <td>1</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>6.66</td>\n",
       "      <td>5945fa89273681f4790b9c934540e898</td>\n",
       "      <td>2020-09-01 03:42:20.350</td>\n",
       "      <td>0.143</td>\n",
       "      <td>OK</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.77</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-09-01 03:42:20.350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>17076017936</td>\n",
       "      <td>34469839</td>\n",
       "      <td>3</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>19.98</td>\n",
       "      <td>bd71069b820c24a22bd4282289d94e60</td>\n",
       "      <td>2020-06-08 18:15:09.725</td>\n",
       "      <td>0.125</td>\n",
       "      <td>KS</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.30</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-06-08 18:15:09.725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4082744250</td>\n",
       "      <td>49245787</td>\n",
       "      <td>2</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>13.32</td>\n",
       "      <td>5916e32f0f145cee644b9842d8d6a6fa</td>\n",
       "      <td>2020-07-22 23:11:10.484</td>\n",
       "      <td>0.075</td>\n",
       "      <td>VA</td>\n",
       "      <td>3.95</td>\n",
       "      <td>8.52</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-07-22 23:11:10.484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8071937661</td>\n",
       "      <td>30087075</td>\n",
       "      <td>1</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>6.66</td>\n",
       "      <td>df693ca56988f5049f9edb99f54b4513</td>\n",
       "      <td>2020-05-11 13:46:09.020</td>\n",
       "      <td>0.040</td>\n",
       "      <td>OH</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.04</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-05-11 13:46:09.020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>18068360732</td>\n",
       "      <td>29348269</td>\n",
       "      <td>2</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>13.32</td>\n",
       "      <td>cc656c66110ee22f9b1a642adb9d54a8</td>\n",
       "      <td>2020-05-27 05:23:39.005</td>\n",
       "      <td>0.040</td>\n",
       "      <td>AR</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-05-27 05:23:39.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5051534866</td>\n",
       "      <td>22305982</td>\n",
       "      <td>1</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>6.66</td>\n",
       "      <td>57021c9407bb966249e49bafc2b0a187</td>\n",
       "      <td>2019-09-27 22:47:46.683</td>\n",
       "      <td>0.040</td>\n",
       "      <td>TX</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.54</td>\n",
       "      <td>False</td>\n",
       "      <td>2019-09-27 22:47:46.683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>9044382132</td>\n",
       "      <td>19275831</td>\n",
       "      <td>1</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>6.66</td>\n",
       "      <td>92e477e03fd8079de3d15fef72a47b84</td>\n",
       "      <td>2019-05-31 22:41:57.139</td>\n",
       "      <td>0.075</td>\n",
       "      <td>TX</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.94</td>\n",
       "      <td>False</td>\n",
       "      <td>2019-05-31 22:41:57.139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>17039873805</td>\n",
       "      <td>17085270</td>\n",
       "      <td>1</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>6.66</td>\n",
       "      <td>c7975ff68468476ca25a189f98cad4fd</td>\n",
       "      <td>2019-03-28 21:58:09.593</td>\n",
       "      <td>0.040</td>\n",
       "      <td>LA</td>\n",
       "      <td>0.00</td>\n",
       "      <td>14.60</td>\n",
       "      <td>False</td>\n",
       "      <td>2019-03-28 21:58:09.593</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    line_item_id  order_id  quantity  selling_price  supplier_cost  \\\n",
       "0     1073625002  31323782         1           9.25           4.37   \n",
       "1     8055020046  22921936         1           9.25           4.37   \n",
       "2     5008546658   4435273         1           9.25           4.37   \n",
       "3     1013699827   6843815         1           9.25           4.37   \n",
       "4     1022146551   9923010         1           9.25           4.37   \n",
       "5     5001304676    897011         1           9.25           4.37   \n",
       "6     5001302446    949897         1           9.25           4.37   \n",
       "7     5001304677    897011         1          13.50           7.11   \n",
       "8     1002241505   1446247         3           9.31           4.17   \n",
       "9     9001563508   1083237         2           4.82           3.27   \n",
       "10  115096974449  77984821         1           6.66           4.22   \n",
       "11  114085432342  54166854         1           6.66           4.22   \n",
       "12  114087916995  59474047         1           6.66           4.22   \n",
       "13   17076017936  34469839         3           6.66           4.22   \n",
       "14    4082744250  49245787         2           6.66           4.22   \n",
       "15    8071937661  30087075         1           6.66           4.22   \n",
       "16   18068360732  29348269         2           6.66           4.22   \n",
       "17    5051534866  22305982         1           6.66           4.22   \n",
       "18    9044382132  19275831         1           6.66           4.22   \n",
       "19   17039873805  17085270         1           6.66           4.22   \n",
       "\n",
       "   product_category  color   size  revenue                      customer_uid  \\\n",
       "0             OTHER  BLACK    2XL     9.25  2674197df180fdb59dfdaa65757e1f4c   \n",
       "1             OTHER  BLACK    2XL     9.25  1bcd890fd3b1c598cfd6ea4b3e3b34f1   \n",
       "2             OTHER  BLACK    2XL     9.25  3069349651afb03593af7d090535f5dc   \n",
       "3             OTHER  BLACK    2XL     9.25  64f9abc25d599e49cfddeb3de7774ca0   \n",
       "4             OTHER    RED    2XL     9.25  d47a0e4a0c6d4e95ade399421c28b5f6   \n",
       "5             OTHER    RED    2XL     9.25  3069349651afb03593af7d090535f5dc   \n",
       "6             OTHER    RED    2XL     9.25  3069349651afb03593af7d090535f5dc   \n",
       "7             OTHER    RED    3XL    13.50  3069349651afb03593af7d090535f5dc   \n",
       "8             OTHER  BLACK    2XL    27.93  466c637ec98030cfc71c8b85f297c476   \n",
       "9       Fashion Tee  BLACK  OTHER     9.64  4a14eb828138502cfb45574454a8e197   \n",
       "10      Fashion Tee  COLOR    2XL     6.66  d490c06fcfc47b6de801511d046aab4d   \n",
       "11      Fashion Tee  COLOR    2XL     6.66  c68011479b0a1228e775b02a5b1b5b50   \n",
       "12      Fashion Tee  COLOR    2XL     6.66  5945fa89273681f4790b9c934540e898   \n",
       "13      Fashion Tee  COLOR    2XL    19.98  bd71069b820c24a22bd4282289d94e60   \n",
       "14      Fashion Tee  COLOR    2XL    13.32  5916e32f0f145cee644b9842d8d6a6fa   \n",
       "15      Fashion Tee  COLOR    2XL     6.66  df693ca56988f5049f9edb99f54b4513   \n",
       "16      Fashion Tee  COLOR    2XL    13.32  cc656c66110ee22f9b1a642adb9d54a8   \n",
       "17      Fashion Tee  COLOR    2XL     6.66  57021c9407bb966249e49bafc2b0a187   \n",
       "18      Fashion Tee  COLOR    2XL     6.66  92e477e03fd8079de3d15fef72a47b84   \n",
       "19      Fashion Tee  COLOR    2XL     6.66  c7975ff68468476ca25a189f98cad4fd   \n",
       "\n",
       "            order_timestamp  discount ship_state  shipping_revenue  \\\n",
       "0   2020-05-22 20:00:58.985     0.075         MI              9.95   \n",
       "1   2019-10-10 18:22:52.295     0.040         PA              0.00   \n",
       "2   2017-05-08 21:42:06.888     0.040         AL              0.00   \n",
       "3   2017-10-23 02:03:00.536     0.000         MI              0.00   \n",
       "4   2018-05-22 22:44:35.824     0.000         LA              0.00   \n",
       "5   2016-04-04 21:52:30.574     0.000         AL              0.00   \n",
       "6   2016-04-04 21:24:08.161     0.125         AL              0.00   \n",
       "7   2016-04-04 21:52:30.574     0.000         AL              0.00   \n",
       "8   2016-06-10 13:22:51.571     0.040         IN              0.00   \n",
       "9   2016-04-24 14:25:39.811     0.000         FL              7.95   \n",
       "10  2020-11-03 22:26:52.714     0.040         TX              0.00   \n",
       "11  2020-08-13 04:48:51.994     0.160         AR              0.00   \n",
       "12  2020-09-01 03:42:20.350     0.143         OK              0.00   \n",
       "13  2020-06-08 18:15:09.725     0.125         KS              0.00   \n",
       "14  2020-07-22 23:11:10.484     0.075         VA              3.95   \n",
       "15  2020-05-11 13:46:09.020     0.040         OH              0.00   \n",
       "16  2020-05-27 05:23:39.005     0.040         AR              0.00   \n",
       "17  2019-09-27 22:47:46.683     0.040         TX              0.00   \n",
       "18  2019-05-31 22:41:57.139     0.075         TX              0.00   \n",
       "19  2019-03-28 21:58:09.593     0.040         LA              0.00   \n",
       "\n",
       "    shipping_cost  returned                    date  \n",
       "0            8.52     False 2020-05-22 20:00:58.985  \n",
       "1           12.27      True 2019-10-10 18:22:52.295  \n",
       "2            7.09     False 2017-05-08 21:42:06.888  \n",
       "3            7.09     False 2017-10-23 02:03:00.536  \n",
       "4            7.39     False 2018-05-22 22:44:35.824  \n",
       "5            6.80     False 2016-04-04 21:52:30.574  \n",
       "6            0.00     False 2016-04-04 21:24:08.161  \n",
       "7            6.80     False 2016-04-04 21:52:30.574  \n",
       "8            7.09     False 2016-06-10 13:22:51.571  \n",
       "9            6.80     False 2016-04-24 14:25:39.811  \n",
       "10          10.25     False 2020-11-03 22:26:52.714  \n",
       "11          14.77     False 2020-08-13 04:48:51.994  \n",
       "12           9.77     False 2020-09-01 03:42:20.350  \n",
       "13           8.30     False 2020-06-08 18:15:09.725  \n",
       "14           8.52     False 2020-07-22 23:11:10.484  \n",
       "15           9.04     False 2020-05-11 13:46:09.020  \n",
       "16           8.00     False 2020-05-27 05:23:39.005  \n",
       "17           8.54     False 2019-09-27 22:47:46.683  \n",
       "18           7.94     False 2019-05-31 22:41:57.139  \n",
       "19          14.60     False 2019-03-28 21:58:09.593  "
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Join items and orders tables using order_id\n",
    "df=items.merge(orders, how='left', on='order_id')\n",
    "df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "9095070e-dfcb-40a2-96e8-0d54edf59c8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate entries: 30\n",
      "0% rows are duplicate.\n"
     ]
    }
   ],
   "source": [
    "# Check for duplicates values\n",
    "print('Duplicate entries: {}'.format(df.duplicated().sum()))\n",
    "print('{}% rows are duplicate.'.format(round((df.duplicated().sum()/df.shape[0])*100),2))\n",
    "# Remove duplicate data\n",
    "df.drop_duplicates(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "b55116a3-830c-4a35-b831-bc3eb1b87073",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>line_item_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>supplier_cost</th>\n",
       "      <th>revenue</th>\n",
       "      <th>discount</th>\n",
       "      <th>shipping_revenue</th>\n",
       "      <th>shipping_cost</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.738480e+05</td>\n",
       "      <td>3.738480e+05</td>\n",
       "      <td>373848.000000</td>\n",
       "      <td>373826.000000</td>\n",
       "      <td>373828.000000</td>\n",
       "      <td>373826.000000</td>\n",
       "      <td>373848.000000</td>\n",
       "      <td>373848.000000</td>\n",
       "      <td>373848.000000</td>\n",
       "      <td>373848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.192973e+10</td>\n",
       "      <td>2.700794e+07</td>\n",
       "      <td>2.337899</td>\n",
       "      <td>6.431785</td>\n",
       "      <td>3.592298</td>\n",
       "      <td>12.956464</td>\n",
       "      <td>0.043858</td>\n",
       "      <td>1.499758</td>\n",
       "      <td>8.324141</td>\n",
       "      <td>2019-04-29 03:53:59.826288896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000026e+09</td>\n",
       "      <td>8.170000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.960000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.960000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2015-11-25 19:36:48.114000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.066496e+09</td>\n",
       "      <td>1.047751e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.250000</td>\n",
       "      <td>1.930000</td>\n",
       "      <td>4.660000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.390000</td>\n",
       "      <td>2018-06-26 22:11:16.680999936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.020797e+09</td>\n",
       "      <td>2.062844e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.050000</td>\n",
       "      <td>2.940000</td>\n",
       "      <td>7.650000</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.990000</td>\n",
       "      <td>2019-07-20 15:23:34.851000064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.706437e+10</td>\n",
       "      <td>3.095542e+07</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>7.820000</td>\n",
       "      <td>4.290000</td>\n",
       "      <td>13.520000</td>\n",
       "      <td>0.075000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.670000</td>\n",
       "      <td>2020-05-28 23:30:38.456000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.181034e+11</td>\n",
       "      <td>9.639224e+07</td>\n",
       "      <td>725.000000</td>\n",
       "      <td>169.000000</td>\n",
       "      <td>71.630000</td>\n",
       "      <td>5333.200000</td>\n",
       "      <td>0.198000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>19.950000</td>\n",
       "      <td>2021-01-01 01:00:11.137000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.720761e+10</td>\n",
       "      <td>2.276066e+07</td>\n",
       "      <td>4.588576</td>\n",
       "      <td>5.435405</td>\n",
       "      <td>2.475649</td>\n",
       "      <td>24.584702</td>\n",
       "      <td>0.053519</td>\n",
       "      <td>3.164443</td>\n",
       "      <td>1.862517</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       line_item_id      order_id       quantity  selling_price  \\\n",
       "count  3.738480e+05  3.738480e+05  373848.000000  373826.000000   \n",
       "mean   1.192973e+10  2.700794e+07       2.337899       6.431785   \n",
       "min    1.000026e+09  8.170000e+02       1.000000       0.960000   \n",
       "25%    3.066496e+09  1.047751e+07       1.000000       3.250000   \n",
       "50%    8.020797e+09  2.062844e+07       1.000000       5.050000   \n",
       "75%    1.706437e+10  3.095542e+07       2.000000       7.820000   \n",
       "max    1.181034e+11  9.639224e+07     725.000000     169.000000   \n",
       "std    1.720761e+10  2.276066e+07       4.588576       5.435405   \n",
       "\n",
       "       supplier_cost        revenue       discount  shipping_revenue  \\\n",
       "count  373828.000000  373826.000000  373848.000000     373848.000000   \n",
       "mean        3.592298      12.956464       0.043858          1.499758   \n",
       "min         0.000000       0.960000       0.000000          0.000000   \n",
       "25%         1.930000       4.660000       0.000000          0.000000   \n",
       "50%         2.940000       7.650000       0.040000          0.000000   \n",
       "75%         4.290000      13.520000       0.075000          0.000000   \n",
       "max        71.630000    5333.200000       0.198000         10.000000   \n",
       "std         2.475649      24.584702       0.053519          3.164443   \n",
       "\n",
       "       shipping_cost                           date  \n",
       "count  373848.000000                         373848  \n",
       "mean        8.324141  2019-04-29 03:53:59.826288896  \n",
       "min         0.000000     2015-11-25 19:36:48.114000  \n",
       "25%         7.390000  2018-06-26 22:11:16.680999936  \n",
       "50%         7.990000  2019-07-20 15:23:34.851000064  \n",
       "75%         8.670000     2020-05-28 23:30:38.456000  \n",
       "max        19.950000     2021-01-01 01:00:11.137000  \n",
       "std         1.862517                            NaN  "
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "fde081a1-c488-464a-b599-a755f9fe4856",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use Box Plot to see outliers clearly\n",
    "import seaborn as sns\n",
    "sns.boxplot(df['revenue'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "dc5d307d-f05d-4920-a0c0-a1f6084a6dc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "upper limit: 86.71056973916072\n",
      "lower limit: -60.79764212042901\n"
     ]
    }
   ],
   "source": [
    "# find the limits \n",
    "upper_limit = df['revenue'].mean() + 3*df['revenue'].std()\n",
    "lower_limit = df['revenue'].mean() - 3*df['revenue'].std()\n",
    "print('upper limit:',upper_limit)\n",
    "print('lower limit:',lower_limit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "214ca705-0eb0-4469-bd16-8897639bda5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>line_item_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>supplier_cost</th>\n",
       "      <th>product_category</th>\n",
       "      <th>color</th>\n",
       "      <th>size</th>\n",
       "      <th>revenue</th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>order_timestamp</th>\n",
       "      <th>discount</th>\n",
       "      <th>ship_state</th>\n",
       "      <th>shipping_revenue</th>\n",
       "      <th>shipping_cost</th>\n",
       "      <th>returned</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>40071339406</td>\n",
       "      <td>30086719</td>\n",
       "      <td>14</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>93.24</td>\n",
       "      <td>5945fa89273681f4790b9c934540e898</td>\n",
       "      <td>2020-05-05 19:24:41.896</td>\n",
       "      <td>0.175</td>\n",
       "      <td>OK</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.52</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-05-05 19:24:41.896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>2014314331</td>\n",
       "      <td>7095614</td>\n",
       "      <td>15</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>2XL</td>\n",
       "      <td>99.90</td>\n",
       "      <td>2470fd512d77116140729e72c7b92f8d</td>\n",
       "      <td>2017-11-28 18:18:32.200</td>\n",
       "      <td>0.143</td>\n",
       "      <td>CO</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.09</td>\n",
       "      <td>False</td>\n",
       "      <td>2017-11-28 18:18:32.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>675</th>\n",
       "      <td>9029508632</td>\n",
       "      <td>12680351</td>\n",
       "      <td>22</td>\n",
       "      <td>7.38</td>\n",
       "      <td>4.61</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>HEATHER</td>\n",
       "      <td>L</td>\n",
       "      <td>162.36</td>\n",
       "      <td>810fd152f49ff611a1ed992d33ea9439</td>\n",
       "      <td>2018-10-10 20:56:09.867</td>\n",
       "      <td>0.143</td>\n",
       "      <td>TX</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.39</td>\n",
       "      <td>False</td>\n",
       "      <td>2018-10-10 20:56:09.867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>18063202474</td>\n",
       "      <td>26883629</td>\n",
       "      <td>10</td>\n",
       "      <td>9.22</td>\n",
       "      <td>5.25</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>L</td>\n",
       "      <td>92.20</td>\n",
       "      <td>f8ab9e95db687f98db42417a05502fd6</td>\n",
       "      <td>2020-02-05 15:00:17.549</td>\n",
       "      <td>0.175</td>\n",
       "      <td>MT</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.27</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-02-05 15:00:17.549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1096</th>\n",
       "      <td>19088004767</td>\n",
       "      <td>56132487</td>\n",
       "      <td>25</td>\n",
       "      <td>7.38</td>\n",
       "      <td>4.33</td>\n",
       "      <td>Fashion Tee</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>2XL</td>\n",
       "      <td>184.50</td>\n",
       "      <td>31ba08a1ef9a82bf51cfc6ea754f5cf1</td>\n",
       "      <td>2020-09-01 19:09:20.045</td>\n",
       "      <td>0.075</td>\n",
       "      <td>TX</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.55</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-09-01 19:09:20.045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373605</th>\n",
       "      <td>44096871688</td>\n",
       "      <td>79211209</td>\n",
       "      <td>20</td>\n",
       "      <td>9.08</td>\n",
       "      <td>4.84</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>L</td>\n",
       "      <td>181.60</td>\n",
       "      <td>deee69b669523640be4dbb6e0f8d559b</td>\n",
       "      <td>2020-11-03 00:05:55.524</td>\n",
       "      <td>0.143</td>\n",
       "      <td>MS</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-11-03 00:05:55.524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373652</th>\n",
       "      <td>48086508710</td>\n",
       "      <td>55000415</td>\n",
       "      <td>8</td>\n",
       "      <td>12.78</td>\n",
       "      <td>6.78</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>WHITE</td>\n",
       "      <td>L</td>\n",
       "      <td>102.24</td>\n",
       "      <td>c6f2737be7387397baa7aeec1bf203ec</td>\n",
       "      <td>2020-08-21 17:16:26.562</td>\n",
       "      <td>0.143</td>\n",
       "      <td>GA</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>True</td>\n",
       "      <td>2020-08-21 17:16:26.562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373736</th>\n",
       "      <td>49091108864</td>\n",
       "      <td>63949756</td>\n",
       "      <td>20</td>\n",
       "      <td>11.29</td>\n",
       "      <td>6.30</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>M</td>\n",
       "      <td>225.80</td>\n",
       "      <td>a1560770694f54e81144777a37470531</td>\n",
       "      <td>2020-09-24 02:26:23.945</td>\n",
       "      <td>0.143</td>\n",
       "      <td>ND</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.52</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-09-24 02:26:23.945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373742</th>\n",
       "      <td>47101766989</td>\n",
       "      <td>90208233</td>\n",
       "      <td>10</td>\n",
       "      <td>18.28</td>\n",
       "      <td>8.25</td>\n",
       "      <td>Sweater</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>M</td>\n",
       "      <td>182.80</td>\n",
       "      <td>f4ee72a7a6d6426ebcaf883d9fb91c0a</td>\n",
       "      <td>2020-12-08 01:12:01.228</td>\n",
       "      <td>0.143</td>\n",
       "      <td>FL</td>\n",
       "      <td>1.93</td>\n",
       "      <td>13.00</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-12-08 01:12:01.228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373778</th>\n",
       "      <td>44096871686</td>\n",
       "      <td>79211209</td>\n",
       "      <td>10</td>\n",
       "      <td>9.08</td>\n",
       "      <td>4.84</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>COLOR</td>\n",
       "      <td>S</td>\n",
       "      <td>90.80</td>\n",
       "      <td>deee69b669523640be4dbb6e0f8d559b</td>\n",
       "      <td>2020-11-03 00:05:55.524</td>\n",
       "      <td>0.143</td>\n",
       "      <td>MS</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-11-03 00:05:55.524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3998 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        line_item_id  order_id  quantity  selling_price  supplier_cost  \\\n",
       "188      40071339406  30086719        14           6.66           4.22   \n",
       "439       2014314331   7095614        15           6.66           4.22   \n",
       "675       9029508632  12680351        22           7.38           4.61   \n",
       "874      18063202474  26883629        10           9.22           5.25   \n",
       "1096     19088004767  56132487        25           7.38           4.33   \n",
       "...              ...       ...       ...            ...            ...   \n",
       "373605   44096871688  79211209        20           9.08           4.84   \n",
       "373652   48086508710  55000415         8          12.78           6.78   \n",
       "373736   49091108864  63949756        20          11.29           6.30   \n",
       "373742   47101766989  90208233        10          18.28           8.25   \n",
       "373778   44096871686  79211209        10           9.08           4.84   \n",
       "\n",
       "       product_category    color size  revenue  \\\n",
       "188         Fashion Tee    BLACK  2XL    93.24   \n",
       "439         Fashion Tee    BLACK  2XL    99.90   \n",
       "675         Fashion Tee  HEATHER    L   162.36   \n",
       "874         Fashion Tee    BLACK    L    92.20   \n",
       "1096        Fashion Tee    COLOR  2XL   184.50   \n",
       "...                 ...      ...  ...      ...   \n",
       "373605            OTHER    COLOR    L   181.60   \n",
       "373652            OTHER    WHITE    L   102.24   \n",
       "373736            OTHER    COLOR    M   225.80   \n",
       "373742          Sweater    COLOR    M   182.80   \n",
       "373778            OTHER    COLOR    S    90.80   \n",
       "\n",
       "                            customer_uid          order_timestamp  discount  \\\n",
       "188     5945fa89273681f4790b9c934540e898  2020-05-05 19:24:41.896     0.175   \n",
       "439     2470fd512d77116140729e72c7b92f8d  2017-11-28 18:18:32.200     0.143   \n",
       "675     810fd152f49ff611a1ed992d33ea9439  2018-10-10 20:56:09.867     0.143   \n",
       "874     f8ab9e95db687f98db42417a05502fd6  2020-02-05 15:00:17.549     0.175   \n",
       "1096    31ba08a1ef9a82bf51cfc6ea754f5cf1  2020-09-01 19:09:20.045     0.075   \n",
       "...                                  ...                      ...       ...   \n",
       "373605  deee69b669523640be4dbb6e0f8d559b  2020-11-03 00:05:55.524     0.143   \n",
       "373652  c6f2737be7387397baa7aeec1bf203ec  2020-08-21 17:16:26.562     0.143   \n",
       "373736  a1560770694f54e81144777a37470531  2020-09-24 02:26:23.945     0.143   \n",
       "373742  f4ee72a7a6d6426ebcaf883d9fb91c0a  2020-12-08 01:12:01.228     0.143   \n",
       "373778  deee69b669523640be4dbb6e0f8d559b  2020-11-03 00:05:55.524     0.143   \n",
       "\n",
       "       ship_state  shipping_revenue  shipping_cost  returned  \\\n",
       "188            OK              0.00           8.52     False   \n",
       "439            CO              0.00           7.09     False   \n",
       "675            TX              0.00           7.39     False   \n",
       "874            MT              0.00           8.27     False   \n",
       "1096           TX              0.00           9.55     False   \n",
       "...           ...               ...            ...       ...   \n",
       "373605         MS              0.00          11.00     False   \n",
       "373652         GA              0.00          11.00      True   \n",
       "373736         ND              0.00          10.52     False   \n",
       "373742         FL              1.93          13.00     False   \n",
       "373778         MS              0.00          11.00     False   \n",
       "\n",
       "                          date  \n",
       "188    2020-05-05 19:24:41.896  \n",
       "439    2017-11-28 18:18:32.200  \n",
       "675    2018-10-10 20:56:09.867  \n",
       "874    2020-02-05 15:00:17.549  \n",
       "1096   2020-09-01 19:09:20.045  \n",
       "...                        ...  \n",
       "373605 2020-11-03 00:05:55.524  \n",
       "373652 2020-08-21 17:16:26.562  \n",
       "373736 2020-09-24 02:26:23.945  \n",
       "373742 2020-12-08 01:12:01.228  \n",
       "373778 2020-11-03 00:05:55.524  \n",
       "\n",
       "[3998 rows x 17 columns]"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find the outliers\n",
    "df.loc[(df['revenue'] >upper_limit) | (df['revenue'] < lower_limit)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "c4d2ba7d-6760-4d0f-b40b-be0c1702de32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before removing outliers: 373848\n",
      "new data: 369828\n",
      "outliers: 4020\n"
     ]
    }
   ],
   "source": [
    "# trimming - delete the outlier data\n",
    "new_df=df.loc[(df['revenue'] < upper_limit) & (df['revenue'] > lower_limit)]\n",
    "print('before removing outliers:', len(df))\n",
    "print('new data:',len(new_df))\n",
    "print('outliers:',len(df)-len(new_df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "913ea9cc-f9b3-4547-afa0-3596bfa3a674",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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4IXOCQDMEucdH/v3748dO3bERz7ykUnrmzdvji1btsS2bdti//790draGitWrIixsbELHhYAmPnOKz7+85//xJ133hmPPPJIvO9976usF0URW7dujQ0bNsSqVati8eLFsXPnznjrrbdi165dUzY0ADBznVd83HPPPXHrrbfGpz71qUnrhw4diqGhoeju7q6slcvlWL58eezbt++sn+vYsWMxOjo66QYAzF7zqr3Dr3/963juuedi//79ZxwbGhqKiIiWlpZJ6y0tLfHKK6+c9fP19fXF/fffX+0YAMAMVdXOx+DgYHz729+Oxx57LBoaGv7P80ql0qSPi6I4Y+209evXx8jISOU2ODhYzUgAwAxT1c7HgQMHYnh4OJYsWVJZO3nyZDzzzDOxbdu2eOmllyLi1A7IwoULK+cMDw+fsRtyWrlcjnK5fD6zAwAzUFU7H5/85CfjH//4R7zwwguV29KlS+POO++MF154Ia699tpobW2NgYGByn2OHz8ee/fujc7OzikfHgCYeara+WhqaorFixdPWnvPe94Tl112WWW9p6cnent7o6OjIzo6OqK3tzfmz58fq1evnrqpAYAZq+oLTt/JunXr4ujRo7F27do4cuRILFu2LHbv3h1NTU1T/aUAgBmoVBRFUe8h/tvo6Gg0NzfHyMhILFiwoN7jABeoq6vrHc/Zs2dPzecAaquax2/v7QIApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAECqefUeAGqpKIoYHx+v9xi8g6NHj9Z7hItaQ0NDlEqleo/BRUR8MKuNj4/HypUr6z0G78DPqL76+/ujsbGx3mNwEfG0CwCQys4Hs1pDQ0P09/fXe4yL2rvZ1fAzqq+GhoZ6j8BFRnwwq5VKJdvJdbZnz57o6uo653Hg4uJpF6Dm/q/AEB5wcRIfAEAq8QGkePt1HXY94OIlPoB0LjCFi5v4AABS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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(new_df['revenue'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "5391c1e3-1ff6-49df-95ba-38baac1521aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# capping - change the outlier values eto upper (or) lower limit values\n",
    "new_df = df.copy()\n",
    "new_df.loc[(new_df['revenue']>upper_limit), 'revenue'] = upper_limit\n",
    "new_df.loc[(new_df['revenue']<lower_limit), 'revenue'] = lower_limit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "41be8c14-0818-47ca-b332-6b15576e6560",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "373848"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(new_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "bd257da2-b8a4-416e-830e-484b5cbd494f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>line_item_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>supplier_cost</th>\n",
       "      <th>revenue</th>\n",
       "      <th>discount</th>\n",
       "      <th>shipping_revenue</th>\n",
       "      <th>shipping_cost</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.738480e+05</td>\n",
       "      <td>3.738480e+05</td>\n",
       "      <td>373848.000000</td>\n",
       "      <td>373826.000000</td>\n",
       "      <td>373828.000000</td>\n",
       "      <td>373826.000000</td>\n",
       "      <td>373848.000000</td>\n",
       "      <td>373848.000000</td>\n",
       "      <td>373848.000000</td>\n",
       "      <td>373848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.192973e+10</td>\n",
       "      <td>2.700794e+07</td>\n",
       "      <td>2.337899</td>\n",
       "      <td>6.431785</td>\n",
       "      <td>3.592298</td>\n",
       "      <td>12.185929</td>\n",
       "      <td>0.043858</td>\n",
       "      <td>1.499758</td>\n",
       "      <td>8.324141</td>\n",
       "      <td>2019-04-29 03:53:59.826288896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000026e+09</td>\n",
       "      <td>8.170000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.960000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.960000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2015-11-25 19:36:48.114000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.066496e+09</td>\n",
       "      <td>1.047751e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.250000</td>\n",
       "      <td>1.930000</td>\n",
       "      <td>4.660000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.390000</td>\n",
       "      <td>2018-06-26 22:11:16.680999936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.020797e+09</td>\n",
       "      <td>2.062844e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.050000</td>\n",
       "      <td>2.940000</td>\n",
       "      <td>7.650000</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.990000</td>\n",
       "      <td>2019-07-20 15:23:34.851000064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.706437e+10</td>\n",
       "      <td>3.095542e+07</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>7.820000</td>\n",
       "      <td>4.290000</td>\n",
       "      <td>13.520000</td>\n",
       "      <td>0.075000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.670000</td>\n",
       "      <td>2020-05-28 23:30:38.456000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.181034e+11</td>\n",
       "      <td>9.639224e+07</td>\n",
       "      <td>725.000000</td>\n",
       "      <td>169.000000</td>\n",
       "      <td>71.630000</td>\n",
       "      <td>86.710570</td>\n",
       "      <td>0.198000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>19.950000</td>\n",
       "      <td>2021-01-01 01:00:11.137000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.720761e+10</td>\n",
       "      <td>2.276066e+07</td>\n",
       "      <td>4.588576</td>\n",
       "      <td>5.435405</td>\n",
       "      <td>2.475649</td>\n",
       "      <td>13.757932</td>\n",
       "      <td>0.053519</td>\n",
       "      <td>3.164443</td>\n",
       "      <td>1.862517</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       line_item_id      order_id       quantity  selling_price  \\\n",
       "count  3.738480e+05  3.738480e+05  373848.000000  373826.000000   \n",
       "mean   1.192973e+10  2.700794e+07       2.337899       6.431785   \n",
       "min    1.000026e+09  8.170000e+02       1.000000       0.960000   \n",
       "25%    3.066496e+09  1.047751e+07       1.000000       3.250000   \n",
       "50%    8.020797e+09  2.062844e+07       1.000000       5.050000   \n",
       "75%    1.706437e+10  3.095542e+07       2.000000       7.820000   \n",
       "max    1.181034e+11  9.639224e+07     725.000000     169.000000   \n",
       "std    1.720761e+10  2.276066e+07       4.588576       5.435405   \n",
       "\n",
       "       supplier_cost        revenue       discount  shipping_revenue  \\\n",
       "count  373828.000000  373826.000000  373848.000000     373848.000000   \n",
       "mean        3.592298      12.185929       0.043858          1.499758   \n",
       "min         0.000000       0.960000       0.000000          0.000000   \n",
       "25%         1.930000       4.660000       0.000000          0.000000   \n",
       "50%         2.940000       7.650000       0.040000          0.000000   \n",
       "75%         4.290000      13.520000       0.075000          0.000000   \n",
       "max        71.630000      86.710570       0.198000         10.000000   \n",
       "std         2.475649      13.757932       0.053519          3.164443   \n",
       "\n",
       "       shipping_cost                           date  \n",
       "count  373848.000000                         373848  \n",
       "mean        8.324141  2019-04-29 03:53:59.826288896  \n",
       "min         0.000000     2015-11-25 19:36:48.114000  \n",
       "25%         7.390000  2018-06-26 22:11:16.680999936  \n",
       "50%         7.990000  2019-07-20 15:23:34.851000064  \n",
       "75%         8.670000     2020-05-28 23:30:38.456000  \n",
       "max        19.950000     2021-01-01 01:00:11.137000  \n",
       "std         1.862517                            NaN  "
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "ea513aed-0e8a-49c3-9ef2-f2a93e2a31b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>last_purchase_date</th>\n",
       "      <th>Recency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00074f521fd7e7b8862d6de975bf7da0</td>\n",
       "      <td>2020-04-13 18:34:00.618</td>\n",
       "      <td>262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00084927a1414e820a82782c9956c44a</td>\n",
       "      <td>2017-09-19 06:07:09.260</td>\n",
       "      <td>1199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0009df61ea36f0588581a45cba32343f</td>\n",
       "      <td>2018-07-16 16:22:35.518</td>\n",
       "      <td>899</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       customer_uid      last_purchase_date  Recency\n",
       "0  00074f521fd7e7b8862d6de975bf7da0 2020-04-13 18:34:00.618      262\n",
       "1  00084927a1414e820a82782c9956c44a 2017-09-19 06:07:09.260     1199\n",
       "2  0009df61ea36f0588581a45cba32343f 2018-07-16 16:22:35.518      899"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create RFM modelling scores for each customer\n",
    "# Calculate recency\n",
    "df_recency = new_df.groupby(by='customer_uid', \n",
    "\t\t\t\t\t\tas_index=False)['date'].max()\n",
    "df_recency.columns = ['customer_uid', 'last_purchase_date']\n",
    "recent_date = df_recency['last_purchase_date'].max()\n",
    "df_recency['Recency'] = df_recency['last_purchase_date'].apply(\n",
    "\tlambda x: (recent_date - x).days)\n",
    "df_recency.head(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "0471718c-73cf-494e-8b43-d0980aa9fc2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00074f521fd7e7b8862d6de975bf7da0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00084927a1414e820a82782c9956c44a</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0009df61ea36f0588581a45cba32343f</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       customer_uid  Frequency\n",
       "0  00074f521fd7e7b8862d6de975bf7da0          1\n",
       "1  00084927a1414e820a82782c9956c44a         16\n",
       "2  0009df61ea36f0588581a45cba32343f          3"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate frequency\n",
    "frequency_df = new_df.drop_duplicates().groupby(\n",
    "        by=['customer_uid'], as_index=False)['date'].count()\n",
    "frequency_df.columns = ['customer_uid','Frequency']\n",
    "frequency_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "02289fb4-99c0-41df-a55c-eaaf7b879f08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>Monetary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00074f521fd7e7b8862d6de975bf7da0</td>\n",
       "      <td>86.71057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00084927a1414e820a82782c9956c44a</td>\n",
       "      <td>76.12000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0009df61ea36f0588581a45cba32343f</td>\n",
       "      <td>24.88000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       customer_uid  Monetary\n",
       "0  00074f521fd7e7b8862d6de975bf7da0  86.71057\n",
       "1  00084927a1414e820a82782c9956c44a  76.12000\n",
       "2  0009df61ea36f0588581a45cba32343f  24.88000"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Calculate monetary value\n",
    "monetary_df = new_df.groupby(by='customer_uid', as_index=False)['revenue'].sum()\n",
    "monetary_df.columns = ['customer_uid','Monetary']\n",
    "monetary_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "af26807a-2bfd-4fd0-993d-1d7363209cf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>Recency</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>Monetary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00074f521fd7e7b8862d6de975bf7da0</td>\n",
       "      <td>262</td>\n",
       "      <td>1</td>\n",
       "      <td>86.71057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00084927a1414e820a82782c9956c44a</td>\n",
       "      <td>1199</td>\n",
       "      <td>16</td>\n",
       "      <td>76.12000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0009df61ea36f0588581a45cba32343f</td>\n",
       "      <td>899</td>\n",
       "      <td>3</td>\n",
       "      <td>24.88000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       customer_uid  Recency  Frequency  Monetary\n",
       "0  00074f521fd7e7b8862d6de975bf7da0      262          1  86.71057\n",
       "1  00084927a1414e820a82782c9956c44a     1199         16  76.12000\n",
       "2  0009df61ea36f0588581a45cba32343f      899          3  24.88000"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merging all three columns in one dataframe\n",
    "rf_df = df_recency.merge(frequency_df, on='customer_uid')\n",
    "rfm_df = rf_df.merge(monetary_df, on='customer_uid').drop(columns='last_purchase_date')\n",
    "rfm_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "a490b570-258c-4e9d-9c95-e4690f289269",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>Recency</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>Monetary</th>\n",
       "      <th>R_rank_norm</th>\n",
       "      <th>F_rank_norm</th>\n",
       "      <th>M_rank_norm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00074f521fd7e7b8862d6de975bf7da0</td>\n",
       "      <td>262</td>\n",
       "      <td>1</td>\n",
       "      <td>86.71057</td>\n",
       "      <td>59.050831</td>\n",
       "      <td>4.741634</td>\n",
       "      <td>4.741634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00084927a1414e820a82782c9956c44a</td>\n",
       "      <td>1199</td>\n",
       "      <td>16</td>\n",
       "      <td>76.12000</td>\n",
       "      <td>11.586484</td>\n",
       "      <td>66.371054</td>\n",
       "      <td>66.371054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0009df61ea36f0588581a45cba32343f</td>\n",
       "      <td>899</td>\n",
       "      <td>3</td>\n",
       "      <td>24.88000</td>\n",
       "      <td>21.942127</td>\n",
       "      <td>20.562847</td>\n",
       "      <td>20.562847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>001632349a7d0ca4aaef9d7ce70ed05b</td>\n",
       "      <td>1178</td>\n",
       "      <td>6</td>\n",
       "      <td>103.90000</td>\n",
       "      <td>12.308421</td>\n",
       "      <td>39.547121</td>\n",
       "      <td>39.547121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>001eb9af0c90990bde1a83d485946c25</td>\n",
       "      <td>588</td>\n",
       "      <td>4</td>\n",
       "      <td>22.14000</td>\n",
       "      <td>36.883839</td>\n",
       "      <td>27.663474</td>\n",
       "      <td>27.663474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>002224cfcae0532fa94a1f5d071b43b3</td>\n",
       "      <td>528</td>\n",
       "      <td>9</td>\n",
       "      <td>77.41000</td>\n",
       "      <td>40.771643</td>\n",
       "      <td>51.619960</td>\n",
       "      <td>51.619960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0023271ac9655586c4f4744c81ab9920</td>\n",
       "      <td>857</td>\n",
       "      <td>6</td>\n",
       "      <td>15.98000</td>\n",
       "      <td>23.445174</td>\n",
       "      <td>39.547121</td>\n",
       "      <td>39.547121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       customer_uid  Recency  Frequency   Monetary  \\\n",
       "0  00074f521fd7e7b8862d6de975bf7da0      262          1   86.71057   \n",
       "1  00084927a1414e820a82782c9956c44a     1199         16   76.12000   \n",
       "2  0009df61ea36f0588581a45cba32343f      899          3   24.88000   \n",
       "3  001632349a7d0ca4aaef9d7ce70ed05b     1178          6  103.90000   \n",
       "4  001eb9af0c90990bde1a83d485946c25      588          4   22.14000   \n",
       "5  002224cfcae0532fa94a1f5d071b43b3      528          9   77.41000   \n",
       "6  0023271ac9655586c4f4744c81ab9920      857          6   15.98000   \n",
       "\n",
       "   R_rank_norm  F_rank_norm  M_rank_norm  \n",
       "0    59.050831     4.741634     4.741634  \n",
       "1    11.586484    66.371054    66.371054  \n",
       "2    21.942127    20.562847    20.562847  \n",
       "3    12.308421    39.547121    39.547121  \n",
       "4    36.883839    27.663474    27.663474  \n",
       "5    40.771643    51.619960    51.619960  \n",
       "6    23.445174    39.547121    39.547121  "
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ranking Customer’s based upon their recency, frequency, and monetary score\n",
    "rfm_df['R_rank'] = rfm_df['Recency'].rank(ascending=False)\n",
    "rfm_df['F_rank'] = rfm_df['Frequency'].rank(ascending=True)\n",
    "rfm_df['M_rank'] = rfm_df['Monetary'].rank(ascending=True)\n",
    "\n",
    "# normalizing the rank of the customers\n",
    "rfm_df['R_rank_norm'] = (rfm_df['R_rank']/rfm_df['R_rank'].max())*100\n",
    "rfm_df['F_rank_norm'] = (rfm_df['F_rank']/rfm_df['F_rank'].max())*100\n",
    "rfm_df['M_rank_norm'] = (rfm_df['F_rank']/rfm_df['M_rank'].max())*100\n",
    "\n",
    "rfm_df.drop(columns=['R_rank', 'F_rank', 'M_rank'], inplace=True)\n",
    "\n",
    "rfm_df.head(7)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "32cbef74-f25a-4154-a7bf-93ab9b1fd76b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>RFM_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00074f521fd7e7b8862d6de975bf7da0</td>\n",
       "      <td>0.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00084927a1414e820a82782c9956c44a</td>\n",
       "      <td>2.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0009df61ea36f0588581a45cba32343f</td>\n",
       "      <td>1.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>001632349a7d0ca4aaef9d7ce70ed05b</td>\n",
       "      <td>1.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>001eb9af0c90990bde1a83d485946c25</td>\n",
       "      <td>1.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>002224cfcae0532fa94a1f5d071b43b3</td>\n",
       "      <td>2.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0023271ac9655586c4f4744c81ab9920</td>\n",
       "      <td>1.86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       customer_uid  RFM_Score\n",
       "0  00074f521fd7e7b8862d6de975bf7da0       0.64\n",
       "1  00084927a1414e820a82782c9956c44a       2.91\n",
       "2  0009df61ea36f0588581a45cba32343f       1.04\n",
       "3  001632349a7d0ca4aaef9d7ce70ed05b       1.77\n",
       "4  001eb9af0c90990bde1a83d485946c25       1.45\n",
       "5  002224cfcae0532fa94a1f5d071b43b3       2.50\n",
       "6  0023271ac9655586c4f4744c81ab9920       1.86"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating RFM SCORE\n",
    "# RFM score is calculated based upon recency, frequency, monetary value normalize ranks. Based upon this score we divide our customers. Here we rate them on a scale of 5. \n",
    "# Formula used for calculating rfm score is : 0.15*Recency score + 0.28*Frequency score + 0.57 *Monetary score\n",
    "rfm_df['RFM_Score'] = 0.15*rfm_df['R_rank_norm']+0.28 * \\\n",
    "\trfm_df['F_rank_norm']+0.57*rfm_df['M_rank_norm']\n",
    "rfm_df['RFM_Score'] *= 0.05\n",
    "rfm_df = rfm_df.round(2)\n",
    "rfm_df[['customer_uid', 'RFM_Score']].head(7)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "cd7b0cb6-ea89-4db3-bae9-200b6670c009",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>Recency</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>Monetary</th>\n",
       "      <th>R_rank_norm</th>\n",
       "      <th>F_rank_norm</th>\n",
       "      <th>M_rank_norm</th>\n",
       "      <th>RFM_Score</th>\n",
       "      <th>Customer_segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00074f521fd7e7b8862d6de975bf7da0</td>\n",
       "      <td>262</td>\n",
       "      <td>1</td>\n",
       "      <td>86.71</td>\n",
       "      <td>59.05</td>\n",
       "      <td>4.74</td>\n",
       "      <td>4.74</td>\n",
       "      <td>0.64</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00084927a1414e820a82782c9956c44a</td>\n",
       "      <td>1199</td>\n",
       "      <td>16</td>\n",
       "      <td>76.12</td>\n",
       "      <td>11.59</td>\n",
       "      <td>66.37</td>\n",
       "      <td>66.37</td>\n",
       "      <td>2.91</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0009df61ea36f0588581a45cba32343f</td>\n",
       "      <td>899</td>\n",
       "      <td>3</td>\n",
       "      <td>24.88</td>\n",
       "      <td>21.94</td>\n",
       "      <td>20.56</td>\n",
       "      <td>20.56</td>\n",
       "      <td>1.04</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>001632349a7d0ca4aaef9d7ce70ed05b</td>\n",
       "      <td>1178</td>\n",
       "      <td>6</td>\n",
       "      <td>103.90</td>\n",
       "      <td>12.31</td>\n",
       "      <td>39.55</td>\n",
       "      <td>39.55</td>\n",
       "      <td>1.77</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>001eb9af0c90990bde1a83d485946c25</td>\n",
       "      <td>588</td>\n",
       "      <td>4</td>\n",
       "      <td>22.14</td>\n",
       "      <td>36.88</td>\n",
       "      <td>27.66</td>\n",
       "      <td>27.66</td>\n",
       "      <td>1.45</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>002224cfcae0532fa94a1f5d071b43b3</td>\n",
       "      <td>528</td>\n",
       "      <td>9</td>\n",
       "      <td>77.41</td>\n",
       "      <td>40.77</td>\n",
       "      <td>51.62</td>\n",
       "      <td>51.62</td>\n",
       "      <td>2.50</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0023271ac9655586c4f4744c81ab9920</td>\n",
       "      <td>857</td>\n",
       "      <td>6</td>\n",
       "      <td>15.98</td>\n",
       "      <td>23.45</td>\n",
       "      <td>39.55</td>\n",
       "      <td>39.55</td>\n",
       "      <td>1.86</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0025516109bb58324c695618944102f5</td>\n",
       "      <td>676</td>\n",
       "      <td>30</td>\n",
       "      <td>281.10</td>\n",
       "      <td>31.33</td>\n",
       "      <td>78.96</td>\n",
       "      <td>78.96</td>\n",
       "      <td>3.59</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0027ab9cda48b94b3e29936393409321</td>\n",
       "      <td>653</td>\n",
       "      <td>14</td>\n",
       "      <td>57.37</td>\n",
       "      <td>32.33</td>\n",
       "      <td>63.11</td>\n",
       "      <td>63.11</td>\n",
       "      <td>2.92</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>002f8816ca0a21db5b577fff5bd3b645</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>139.56</td>\n",
       "      <td>89.28</td>\n",
       "      <td>54.53</td>\n",
       "      <td>54.53</td>\n",
       "      <td>2.99</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0052d897ced5dfd6efe8a8b11bbf930f</td>\n",
       "      <td>120</td>\n",
       "      <td>6</td>\n",
       "      <td>66.44</td>\n",
       "      <td>75.66</td>\n",
       "      <td>39.55</td>\n",
       "      <td>39.55</td>\n",
       "      <td>2.25</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>005abe414eca3a33cf697a183ede43db</td>\n",
       "      <td>135</td>\n",
       "      <td>11</td>\n",
       "      <td>70.21</td>\n",
       "      <td>73.79</td>\n",
       "      <td>57.06</td>\n",
       "      <td>57.06</td>\n",
       "      <td>2.98</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>005cc75533af0631506c918fb1ffecc2</td>\n",
       "      <td>493</td>\n",
       "      <td>6</td>\n",
       "      <td>330.40</td>\n",
       "      <td>43.25</td>\n",
       "      <td>39.55</td>\n",
       "      <td>39.55</td>\n",
       "      <td>2.01</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>005f6a36a7e59da93895102208b4e2c7</td>\n",
       "      <td>674</td>\n",
       "      <td>4</td>\n",
       "      <td>183.42</td>\n",
       "      <td>31.42</td>\n",
       "      <td>27.66</td>\n",
       "      <td>27.66</td>\n",
       "      <td>1.41</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>006d5d8ac2718bee09acc6660bf1087e</td>\n",
       "      <td>428</td>\n",
       "      <td>8</td>\n",
       "      <td>78.14</td>\n",
       "      <td>47.64</td>\n",
       "      <td>48.21</td>\n",
       "      <td>48.21</td>\n",
       "      <td>2.41</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>00737174c02f93ab68aabd7c81d120e0</td>\n",
       "      <td>101</td>\n",
       "      <td>1</td>\n",
       "      <td>22.28</td>\n",
       "      <td>78.50</td>\n",
       "      <td>4.74</td>\n",
       "      <td>4.74</td>\n",
       "      <td>0.79</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>007fe971e69216db870a94aeed785b45</td>\n",
       "      <td>67</td>\n",
       "      <td>45</td>\n",
       "      <td>412.88</td>\n",
       "      <td>84.32</td>\n",
       "      <td>84.52</td>\n",
       "      <td>84.52</td>\n",
       "      <td>4.22</td>\n",
       "      <td>High Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0081cc4fa2efe172d41f16a379ade1de</td>\n",
       "      <td>746</td>\n",
       "      <td>8</td>\n",
       "      <td>71.16</td>\n",
       "      <td>28.98</td>\n",
       "      <td>48.21</td>\n",
       "      <td>48.21</td>\n",
       "      <td>2.27</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0091ced2455a81539e3c40ffb925e099</td>\n",
       "      <td>1128</td>\n",
       "      <td>15</td>\n",
       "      <td>111.95</td>\n",
       "      <td>14.08</td>\n",
       "      <td>64.82</td>\n",
       "      <td>64.82</td>\n",
       "      <td>2.86</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>00955a1de21d7be51193e4ea6c5f43d1</td>\n",
       "      <td>305</td>\n",
       "      <td>6</td>\n",
       "      <td>22.35</td>\n",
       "      <td>56.27</td>\n",
       "      <td>39.55</td>\n",
       "      <td>39.55</td>\n",
       "      <td>2.10</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>00a29848c1a0e0ca7009a68e2dfc2ad1</td>\n",
       "      <td>285</td>\n",
       "      <td>8</td>\n",
       "      <td>433.22</td>\n",
       "      <td>57.78</td>\n",
       "      <td>48.21</td>\n",
       "      <td>48.21</td>\n",
       "      <td>2.48</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>00a36e4cb8aed2eb56da802f266c66d4</td>\n",
       "      <td>588</td>\n",
       "      <td>2</td>\n",
       "      <td>73.80</td>\n",
       "      <td>36.88</td>\n",
       "      <td>13.30</td>\n",
       "      <td>13.30</td>\n",
       "      <td>0.84</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>00a4bc67d18da529f2dddbf52cb067a0</td>\n",
       "      <td>745</td>\n",
       "      <td>26</td>\n",
       "      <td>360.66</td>\n",
       "      <td>29.04</td>\n",
       "      <td>76.40</td>\n",
       "      <td>76.40</td>\n",
       "      <td>3.46</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>00a4fd9da42b02a6e813ccc27d06e1fa</td>\n",
       "      <td>1057</td>\n",
       "      <td>7</td>\n",
       "      <td>95.05</td>\n",
       "      <td>16.07</td>\n",
       "      <td>44.27</td>\n",
       "      <td>44.27</td>\n",
       "      <td>2.00</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>00a7448aa8fdcc56ac8320b72d3f6d03</td>\n",
       "      <td>165</td>\n",
       "      <td>3</td>\n",
       "      <td>73.25</td>\n",
       "      <td>70.20</td>\n",
       "      <td>20.56</td>\n",
       "      <td>20.56</td>\n",
       "      <td>1.40</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>00ab82dedfc07b0f1608a51f0845b674</td>\n",
       "      <td>813</td>\n",
       "      <td>2</td>\n",
       "      <td>11.36</td>\n",
       "      <td>25.08</td>\n",
       "      <td>13.30</td>\n",
       "      <td>13.30</td>\n",
       "      <td>0.75</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>00b48429e5eefbbf48f47d6aafd6df86</td>\n",
       "      <td>537</td>\n",
       "      <td>179</td>\n",
       "      <td>3449.35</td>\n",
       "      <td>40.23</td>\n",
       "      <td>95.34</td>\n",
       "      <td>95.34</td>\n",
       "      <td>4.35</td>\n",
       "      <td>High Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>00b51003aceb47deb776da998bb6221b</td>\n",
       "      <td>1217</td>\n",
       "      <td>7</td>\n",
       "      <td>187.70</td>\n",
       "      <td>11.03</td>\n",
       "      <td>44.27</td>\n",
       "      <td>44.27</td>\n",
       "      <td>1.96</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>00c37d7addf7d91937e8d52ca8e34fe6</td>\n",
       "      <td>76</td>\n",
       "      <td>6</td>\n",
       "      <td>58.03</td>\n",
       "      <td>82.50</td>\n",
       "      <td>39.55</td>\n",
       "      <td>39.55</td>\n",
       "      <td>2.30</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>00ceaf862913313a883c6bfe8e2b3e1f</td>\n",
       "      <td>49</td>\n",
       "      <td>26</td>\n",
       "      <td>396.13</td>\n",
       "      <td>87.22</td>\n",
       "      <td>76.40</td>\n",
       "      <td>76.40</td>\n",
       "      <td>3.90</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>00d337cb812844da6bf7101c640f91b1</td>\n",
       "      <td>161</td>\n",
       "      <td>24</td>\n",
       "      <td>220.44</td>\n",
       "      <td>70.75</td>\n",
       "      <td>74.78</td>\n",
       "      <td>74.78</td>\n",
       "      <td>3.71</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>00d35b3cae57f070c371c1f7ac5f87b1</td>\n",
       "      <td>87</td>\n",
       "      <td>7</td>\n",
       "      <td>77.72</td>\n",
       "      <td>80.55</td>\n",
       "      <td>44.27</td>\n",
       "      <td>44.27</td>\n",
       "      <td>2.49</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>00d52c6e4c3ea3fe40d9eacf5d1528c9</td>\n",
       "      <td>1032</td>\n",
       "      <td>40</td>\n",
       "      <td>458.59</td>\n",
       "      <td>16.84</td>\n",
       "      <td>83.03</td>\n",
       "      <td>83.03</td>\n",
       "      <td>3.66</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>00d8833e50294b0c906efa5a0a95fb31</td>\n",
       "      <td>853</td>\n",
       "      <td>5</td>\n",
       "      <td>129.05</td>\n",
       "      <td>23.59</td>\n",
       "      <td>34.09</td>\n",
       "      <td>34.09</td>\n",
       "      <td>1.63</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>00f495164bdf31b426be080142eb118c</td>\n",
       "      <td>1015</td>\n",
       "      <td>10</td>\n",
       "      <td>572.88</td>\n",
       "      <td>17.38</td>\n",
       "      <td>54.53</td>\n",
       "      <td>54.53</td>\n",
       "      <td>2.45</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>00f771d45fed61c1891557abe887be40</td>\n",
       "      <td>1653</td>\n",
       "      <td>9</td>\n",
       "      <td>71.43</td>\n",
       "      <td>2.83</td>\n",
       "      <td>51.62</td>\n",
       "      <td>51.62</td>\n",
       "      <td>2.22</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>0100849603d62aba319b6f33e17de079</td>\n",
       "      <td>1134</td>\n",
       "      <td>4</td>\n",
       "      <td>36.81</td>\n",
       "      <td>13.86</td>\n",
       "      <td>27.66</td>\n",
       "      <td>27.66</td>\n",
       "      <td>1.28</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>0102738b4bb242a09e5f06c3cd40dd95</td>\n",
       "      <td>347</td>\n",
       "      <td>1</td>\n",
       "      <td>15.02</td>\n",
       "      <td>53.45</td>\n",
       "      <td>4.74</td>\n",
       "      <td>4.74</td>\n",
       "      <td>0.60</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>0107bc047de81ac8f3c0888c7f91f63b</td>\n",
       "      <td>129</td>\n",
       "      <td>96</td>\n",
       "      <td>1111.32</td>\n",
       "      <td>74.51</td>\n",
       "      <td>91.58</td>\n",
       "      <td>91.58</td>\n",
       "      <td>4.45</td>\n",
       "      <td>High Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>010eaf7395ba71f7b1a88dc4aa02443a</td>\n",
       "      <td>1177</td>\n",
       "      <td>6</td>\n",
       "      <td>225.85</td>\n",
       "      <td>12.37</td>\n",
       "      <td>39.55</td>\n",
       "      <td>39.55</td>\n",
       "      <td>1.77</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>01103f819bbc4c2dab0d0807d248093a</td>\n",
       "      <td>536</td>\n",
       "      <td>12</td>\n",
       "      <td>288.07</td>\n",
       "      <td>40.31</td>\n",
       "      <td>59.41</td>\n",
       "      <td>59.41</td>\n",
       "      <td>2.83</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>01177eeb9909d1c62c006c2b35061dab</td>\n",
       "      <td>703</td>\n",
       "      <td>2</td>\n",
       "      <td>96.70</td>\n",
       "      <td>30.25</td>\n",
       "      <td>13.30</td>\n",
       "      <td>13.30</td>\n",
       "      <td>0.79</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>0122ce2198528aef6e4ff466e8a42f7a</td>\n",
       "      <td>1484</td>\n",
       "      <td>3</td>\n",
       "      <td>11.13</td>\n",
       "      <td>5.62</td>\n",
       "      <td>20.56</td>\n",
       "      <td>20.56</td>\n",
       "      <td>0.92</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>012dc48680cf4e9fd71c780f7f1df8ed</td>\n",
       "      <td>1399</td>\n",
       "      <td>22</td>\n",
       "      <td>167.07</td>\n",
       "      <td>6.86</td>\n",
       "      <td>73.05</td>\n",
       "      <td>73.05</td>\n",
       "      <td>3.16</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>012dd174613aae3b47baa30731e195d9</td>\n",
       "      <td>351</td>\n",
       "      <td>6</td>\n",
       "      <td>103.53</td>\n",
       "      <td>53.23</td>\n",
       "      <td>39.55</td>\n",
       "      <td>39.55</td>\n",
       "      <td>2.08</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>012f6872835bf1780a9e289528a08c28</td>\n",
       "      <td>809</td>\n",
       "      <td>1</td>\n",
       "      <td>9.44</td>\n",
       "      <td>25.29</td>\n",
       "      <td>4.74</td>\n",
       "      <td>4.74</td>\n",
       "      <td>0.39</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>013036ee22845bc0370969f84c06f4a1</td>\n",
       "      <td>53</td>\n",
       "      <td>79</td>\n",
       "      <td>728.24</td>\n",
       "      <td>86.45</td>\n",
       "      <td>89.92</td>\n",
       "      <td>89.92</td>\n",
       "      <td>4.47</td>\n",
       "      <td>High Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>0143f6c446f46ac0bb4a2e246f544163</td>\n",
       "      <td>105</td>\n",
       "      <td>22</td>\n",
       "      <td>147.53</td>\n",
       "      <td>77.73</td>\n",
       "      <td>73.05</td>\n",
       "      <td>73.05</td>\n",
       "      <td>3.69</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>0148567a6ee7bb473a4922cffa1f645d</td>\n",
       "      <td>60</td>\n",
       "      <td>19</td>\n",
       "      <td>144.58</td>\n",
       "      <td>85.35</td>\n",
       "      <td>69.94</td>\n",
       "      <td>69.94</td>\n",
       "      <td>3.61</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>0148a974c66460d031f5c7f49878a4f4</td>\n",
       "      <td>58</td>\n",
       "      <td>2</td>\n",
       "      <td>14.22</td>\n",
       "      <td>85.71</td>\n",
       "      <td>13.30</td>\n",
       "      <td>13.30</td>\n",
       "      <td>1.21</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        customer_uid  Recency  Frequency  Monetary  \\\n",
       "0   00074f521fd7e7b8862d6de975bf7da0      262          1     86.71   \n",
       "1   00084927a1414e820a82782c9956c44a     1199         16     76.12   \n",
       "2   0009df61ea36f0588581a45cba32343f      899          3     24.88   \n",
       "3   001632349a7d0ca4aaef9d7ce70ed05b     1178          6    103.90   \n",
       "4   001eb9af0c90990bde1a83d485946c25      588          4     22.14   \n",
       "5   002224cfcae0532fa94a1f5d071b43b3      528          9     77.41   \n",
       "6   0023271ac9655586c4f4744c81ab9920      857          6     15.98   \n",
       "7   0025516109bb58324c695618944102f5      676         30    281.10   \n",
       "8   0027ab9cda48b94b3e29936393409321      653         14     57.37   \n",
       "9   002f8816ca0a21db5b577fff5bd3b645       40         10    139.56   \n",
       "10  0052d897ced5dfd6efe8a8b11bbf930f      120          6     66.44   \n",
       "11  005abe414eca3a33cf697a183ede43db      135         11     70.21   \n",
       "12  005cc75533af0631506c918fb1ffecc2      493          6    330.40   \n",
       "13  005f6a36a7e59da93895102208b4e2c7      674          4    183.42   \n",
       "14  006d5d8ac2718bee09acc6660bf1087e      428          8     78.14   \n",
       "15  00737174c02f93ab68aabd7c81d120e0      101          1     22.28   \n",
       "16  007fe971e69216db870a94aeed785b45       67         45    412.88   \n",
       "17  0081cc4fa2efe172d41f16a379ade1de      746          8     71.16   \n",
       "18  0091ced2455a81539e3c40ffb925e099     1128         15    111.95   \n",
       "19  00955a1de21d7be51193e4ea6c5f43d1      305          6     22.35   \n",
       "20  00a29848c1a0e0ca7009a68e2dfc2ad1      285          8    433.22   \n",
       "21  00a36e4cb8aed2eb56da802f266c66d4      588          2     73.80   \n",
       "22  00a4bc67d18da529f2dddbf52cb067a0      745         26    360.66   \n",
       "23  00a4fd9da42b02a6e813ccc27d06e1fa     1057          7     95.05   \n",
       "24  00a7448aa8fdcc56ac8320b72d3f6d03      165          3     73.25   \n",
       "25  00ab82dedfc07b0f1608a51f0845b674      813          2     11.36   \n",
       "26  00b48429e5eefbbf48f47d6aafd6df86      537        179   3449.35   \n",
       "27  00b51003aceb47deb776da998bb6221b     1217          7    187.70   \n",
       "28  00c37d7addf7d91937e8d52ca8e34fe6       76          6     58.03   \n",
       "29  00ceaf862913313a883c6bfe8e2b3e1f       49         26    396.13   \n",
       "30  00d337cb812844da6bf7101c640f91b1      161         24    220.44   \n",
       "31  00d35b3cae57f070c371c1f7ac5f87b1       87          7     77.72   \n",
       "32  00d52c6e4c3ea3fe40d9eacf5d1528c9     1032         40    458.59   \n",
       "33  00d8833e50294b0c906efa5a0a95fb31      853          5    129.05   \n",
       "34  00f495164bdf31b426be080142eb118c     1015         10    572.88   \n",
       "35  00f771d45fed61c1891557abe887be40     1653          9     71.43   \n",
       "36  0100849603d62aba319b6f33e17de079     1134          4     36.81   \n",
       "37  0102738b4bb242a09e5f06c3cd40dd95      347          1     15.02   \n",
       "38  0107bc047de81ac8f3c0888c7f91f63b      129         96   1111.32   \n",
       "39  010eaf7395ba71f7b1a88dc4aa02443a     1177          6    225.85   \n",
       "40  01103f819bbc4c2dab0d0807d248093a      536         12    288.07   \n",
       "41  01177eeb9909d1c62c006c2b35061dab      703          2     96.70   \n",
       "42  0122ce2198528aef6e4ff466e8a42f7a     1484          3     11.13   \n",
       "43  012dc48680cf4e9fd71c780f7f1df8ed     1399         22    167.07   \n",
       "44  012dd174613aae3b47baa30731e195d9      351          6    103.53   \n",
       "45  012f6872835bf1780a9e289528a08c28      809          1      9.44   \n",
       "46  013036ee22845bc0370969f84c06f4a1       53         79    728.24   \n",
       "47  0143f6c446f46ac0bb4a2e246f544163      105         22    147.53   \n",
       "48  0148567a6ee7bb473a4922cffa1f645d       60         19    144.58   \n",
       "49  0148a974c66460d031f5c7f49878a4f4       58          2     14.22   \n",
       "\n",
       "    R_rank_norm  F_rank_norm  M_rank_norm  RFM_Score       Customer_segment  \n",
       "0         59.05         4.74         4.74       0.64         Lost Customers  \n",
       "1         11.59        66.37        66.37       2.91    Low Value Customers  \n",
       "2         21.94        20.56        20.56       1.04         Lost Customers  \n",
       "3         12.31        39.55        39.55       1.77    Low Value Customers  \n",
       "4         36.88        27.66        27.66       1.45         Lost Customers  \n",
       "5         40.77        51.62        51.62       2.50    Low Value Customers  \n",
       "6         23.45        39.55        39.55       1.86    Low Value Customers  \n",
       "7         31.33        78.96        78.96       3.59  Medium Value Customer  \n",
       "8         32.33        63.11        63.11       2.92    Low Value Customers  \n",
       "9         89.28        54.53        54.53       2.99    Low Value Customers  \n",
       "10        75.66        39.55        39.55       2.25    Low Value Customers  \n",
       "11        73.79        57.06        57.06       2.98    Low Value Customers  \n",
       "12        43.25        39.55        39.55       2.01    Low Value Customers  \n",
       "13        31.42        27.66        27.66       1.41         Lost Customers  \n",
       "14        47.64        48.21        48.21       2.41    Low Value Customers  \n",
       "15        78.50         4.74         4.74       0.79         Lost Customers  \n",
       "16        84.32        84.52        84.52       4.22    High Value Customer  \n",
       "17        28.98        48.21        48.21       2.27    Low Value Customers  \n",
       "18        14.08        64.82        64.82       2.86    Low Value Customers  \n",
       "19        56.27        39.55        39.55       2.10    Low Value Customers  \n",
       "20        57.78        48.21        48.21       2.48    Low Value Customers  \n",
       "21        36.88        13.30        13.30       0.84         Lost Customers  \n",
       "22        29.04        76.40        76.40       3.46  Medium Value Customer  \n",
       "23        16.07        44.27        44.27       2.00    Low Value Customers  \n",
       "24        70.20        20.56        20.56       1.40         Lost Customers  \n",
       "25        25.08        13.30        13.30       0.75         Lost Customers  \n",
       "26        40.23        95.34        95.34       4.35    High Value Customer  \n",
       "27        11.03        44.27        44.27       1.96    Low Value Customers  \n",
       "28        82.50        39.55        39.55       2.30    Low Value Customers  \n",
       "29        87.22        76.40        76.40       3.90  Medium Value Customer  \n",
       "30        70.75        74.78        74.78       3.71  Medium Value Customer  \n",
       "31        80.55        44.27        44.27       2.49    Low Value Customers  \n",
       "32        16.84        83.03        83.03       3.66  Medium Value Customer  \n",
       "33        23.59        34.09        34.09       1.63    Low Value Customers  \n",
       "34        17.38        54.53        54.53       2.45    Low Value Customers  \n",
       "35         2.83        51.62        51.62       2.22    Low Value Customers  \n",
       "36        13.86        27.66        27.66       1.28         Lost Customers  \n",
       "37        53.45         4.74         4.74       0.60         Lost Customers  \n",
       "38        74.51        91.58        91.58       4.45    High Value Customer  \n",
       "39        12.37        39.55        39.55       1.77    Low Value Customers  \n",
       "40        40.31        59.41        59.41       2.83    Low Value Customers  \n",
       "41        30.25        13.30        13.30       0.79         Lost Customers  \n",
       "42         5.62        20.56        20.56       0.92         Lost Customers  \n",
       "43         6.86        73.05        73.05       3.16  Medium Value Customer  \n",
       "44        53.23        39.55        39.55       2.08    Low Value Customers  \n",
       "45        25.29         4.74         4.74       0.39         Lost Customers  \n",
       "46        86.45        89.92        89.92       4.47    High Value Customer  \n",
       "47        77.73        73.05        73.05       3.69  Medium Value Customer  \n",
       "48        85.35        69.94        69.94       3.61  Medium Value Customer  \n",
       "49        85.71        13.30        13.30       1.21         Lost Customers  "
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfm_df.head(50)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "c0b16502-1c34-480d-b64b-d4b3b04e6be6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_uid</th>\n",
       "      <th>RFM_Score</th>\n",
       "      <th>Customer_segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00074f521fd7e7b8862d6de975bf7da0</td>\n",
       "      <td>0.64</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00084927a1414e820a82782c9956c44a</td>\n",
       "      <td>2.91</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0009df61ea36f0588581a45cba32343f</td>\n",
       "      <td>1.04</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>001632349a7d0ca4aaef9d7ce70ed05b</td>\n",
       "      <td>1.77</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>001eb9af0c90990bde1a83d485946c25</td>\n",
       "      <td>1.45</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>002224cfcae0532fa94a1f5d071b43b3</td>\n",
       "      <td>2.50</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0023271ac9655586c4f4744c81ab9920</td>\n",
       "      <td>1.86</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0025516109bb58324c695618944102f5</td>\n",
       "      <td>3.59</td>\n",
       "      <td>Medium Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0027ab9cda48b94b3e29936393409321</td>\n",
       "      <td>2.92</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>002f8816ca0a21db5b577fff5bd3b645</td>\n",
       "      <td>2.99</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0052d897ced5dfd6efe8a8b11bbf930f</td>\n",
       "      <td>2.25</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>005abe414eca3a33cf697a183ede43db</td>\n",
       "      <td>2.98</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>005cc75533af0631506c918fb1ffecc2</td>\n",
       "      <td>2.01</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>005f6a36a7e59da93895102208b4e2c7</td>\n",
       "      <td>1.41</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>006d5d8ac2718bee09acc6660bf1087e</td>\n",
       "      <td>2.41</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>00737174c02f93ab68aabd7c81d120e0</td>\n",
       "      <td>0.79</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>007fe971e69216db870a94aeed785b45</td>\n",
       "      <td>4.22</td>\n",
       "      <td>High Value Customer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0081cc4fa2efe172d41f16a379ade1de</td>\n",
       "      <td>2.27</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0091ced2455a81539e3c40ffb925e099</td>\n",
       "      <td>2.86</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>00955a1de21d7be51193e4ea6c5f43d1</td>\n",
       "      <td>2.10</td>\n",
       "      <td>Low Value Customers</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        customer_uid  RFM_Score       Customer_segment\n",
       "0   00074f521fd7e7b8862d6de975bf7da0       0.64         Lost Customers\n",
       "1   00084927a1414e820a82782c9956c44a       2.91    Low Value Customers\n",
       "2   0009df61ea36f0588581a45cba32343f       1.04         Lost Customers\n",
       "3   001632349a7d0ca4aaef9d7ce70ed05b       1.77    Low Value Customers\n",
       "4   001eb9af0c90990bde1a83d485946c25       1.45         Lost Customers\n",
       "5   002224cfcae0532fa94a1f5d071b43b3       2.50    Low Value Customers\n",
       "6   0023271ac9655586c4f4744c81ab9920       1.86    Low Value Customers\n",
       "7   0025516109bb58324c695618944102f5       3.59  Medium Value Customer\n",
       "8   0027ab9cda48b94b3e29936393409321       2.92    Low Value Customers\n",
       "9   002f8816ca0a21db5b577fff5bd3b645       2.99    Low Value Customers\n",
       "10  0052d897ced5dfd6efe8a8b11bbf930f       2.25    Low Value Customers\n",
       "11  005abe414eca3a33cf697a183ede43db       2.98    Low Value Customers\n",
       "12  005cc75533af0631506c918fb1ffecc2       2.01    Low Value Customers\n",
       "13  005f6a36a7e59da93895102208b4e2c7       1.41         Lost Customers\n",
       "14  006d5d8ac2718bee09acc6660bf1087e       2.41    Low Value Customers\n",
       "15  00737174c02f93ab68aabd7c81d120e0       0.79         Lost Customers\n",
       "16  007fe971e69216db870a94aeed785b45       4.22    High Value Customer\n",
       "17  0081cc4fa2efe172d41f16a379ade1de       2.27    Low Value Customers\n",
       "18  0091ced2455a81539e3c40ffb925e099       2.86    Low Value Customers\n",
       "19  00955a1de21d7be51193e4ea6c5f43d1       2.10    Low Value Customers"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rating customer based upon the RFM score\n",
    "# rfm score >4.5 : Top Customer\n",
    "# 4.5 > rfm score > 4 : High Value Customer\n",
    "# 4>rfm score >3 : Medium value customer\n",
    "# 3>rfm score>1.6 : Low-value customer\n",
    "# rfm score<1.6 :Lost Customer\n",
    "rfm_df[\"Customer_segment\"] = np.where(rfm_df['RFM_Score'] >\n",
    "\t\t\t\t\t\t\t\t\t4.5, \"Top Customers\", \n",
    "\t\t\t\t\t\t\t\t\t(np.where(\n",
    "\t\t\t\t\t\t\t\t\t\trfm_df['RFM_Score'] > 4,\n",
    "\t\t\t\t\t\t\t\t\t\t\"High Value Customer\",\n",
    "\t\t\t\t\t\t\t\t\t\t(np.where(\n",
    "\trfm_df['RFM_Score'] > 3,\n",
    "\t\t\t\t\t\t\t\"Medium Value Customer\",\n",
    "\t\t\t\t\t\t\tnp.where(rfm_df['RFM_Score'] > 1.6, \n",
    "\t\t\t\t\t\t\t'Low Value Customers', 'Lost Customers'))))))\n",
    "rfm_df[['customer_uid', 'RFM_Score', 'Customer_segment']].head(20)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "507cf41c-325a-41cf-ba94-ebe4ec1e0efc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the customer segments\n",
    "plt.pie(rfm_df.Customer_segment.value_counts(),\n",
    "\t\tlabels=rfm_df.Customer_segment.value_counts().index,\n",
    "\t\tautopct='%.0f%%')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1559c17c-eef1-41f9-80d2-eab0b6492fe5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
